# [doc = r"Register block"] # [repr (C)] pub struct MODE2 { ctrl : CTRL , readreq : READREQ , evctrl : EVCTRL , intenclr : INTENCLR , intenset : INTENSET , intflag : INTFLAG , _reserved6 : [u8 ; 0x01] , status : STATUS , dbgctrl : DBGCTRL , freqcorr : FREQCORR , _reserved9 : [u8 ; 0x03] , clock : CLOCK , _reserved10 : [u8 ; 0x04] , alarm : [ALARM ; 1] , mask : [MASK ; 1] , } impl MODE2 { # [doc = "0x00 - MODE2 Control"] # [inline (always)] pub const fn ctrl (& self) -> & CTRL { & self . ctrl } # [doc = "0x02 - Read Request"] # [inline (always)] pub const fn readreq (& self) -> & READREQ { & self . readreq } # [doc = "0x04 - MODE2 Event Control"] # [inline (always)] pub const fn evctrl (& self) -> & EVCTRL { & self . evctrl } # [doc = "0x06 - MODE2 Interrupt Enable Clear"] # [inline (always)] pub const fn intenclr (& self) -> & INTENCLR { & self . intenclr } # [doc = "0x07 - MODE2 Interrupt Enable Set"] # [inline (always)] pub const fn intenset (& self) -> & INTENSET { & self . intenset } # [doc = "0x08 - MODE2 Interrupt Flag Status and Clear"] # [inline (always)] pub const fn intflag (& self) -> & INTFLAG { & self . intflag } # [doc = "0x0a - Status"] # [inline (always)] pub const fn status (& self) -> & STATUS { & self . status } # [doc = "0x0b - Debug Control"] # [inline (always)] pub const fn dbgctrl (& self) -> & DBGCTRL { & self . dbgctrl } # [doc = "0x0c - Frequency Correction"] # [inline (always)] pub const fn freqcorr (& self) -> & FREQCORR { & self . freqcorr } # [doc = "0x10 - MODE2 Clock Value"] # [inline (always)] pub const fn clock (& self) -> & CLOCK { & self . clock } # [doc = "0x18 - MODE2 Alarm n Value"] # [inline (always)] pub const fn alarm (& self , n : usize) -> & ALARM { & self . alarm [n] } # [doc = "Iterator for array of:"] # [doc = "0x18 - MODE2 Alarm n Value"] # [inline (always)] pub fn alarm_iter (& self) -> impl Iterator < Item = & ALARM > { self . alarm . iter () } # [doc = "0x1c - MODE2 Alarm n Mask"] # [inline (always)] pub const fn mask (& self , n : usize) -> & MASK { & self . mask [n] } # [doc = "Iterator for array of:"] # [doc = "0x1c - MODE2 Alarm n Mask"] # [inline (always)] pub fn mask_iter (& self) -> impl Iterator < Item = & MASK > { self . mask . iter () } } # [doc = "CTRL (rw) register accessor: MODE2 Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrl`]
module"] pub type CTRL = crate :: Reg < ctrl :: CTRL_SPEC > ; # [doc = "MODE2 Control"] pub mod ctrl ; # [doc = "READREQ (rw) register accessor: Read Request\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`readreq::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`readreq::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@readreq`]
module"] pub type READREQ = crate :: Reg < readreq :: READREQ_SPEC > ; # [doc = "Read Request"] pub mod readreq ; # [doc = "EVCTRL (rw) register accessor: MODE2 Event Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`evctrl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`evctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@evctrl`]
module"] pub type EVCTRL = crate :: Reg < evctrl :: EVCTRL_SPEC > ; # [doc = "MODE2 Event Control"] pub mod evctrl ; # [doc = "INTENCLR (rw) register accessor: MODE2 Interrupt Enable Clear\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intenclr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intenclr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intenclr`]
module"] pub type INTENCLR = crate :: Reg < intenclr :: INTENCLR_SPEC > ; # [doc = "MODE2 Interrupt Enable Clear"] pub mod intenclr ; # [doc = "INTENSET (rw) register accessor: MODE2 Interrupt Enable Set\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intenset::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intenset::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intenset`]
module"] pub type INTENSET = crate :: Reg < intenset :: INTENSET_SPEC > ; # [doc = "MODE2 Interrupt Enable Set"] pub mod intenset ; # [doc = "INTFLAG (rw) register accessor: MODE2 Interrupt Flag Status and Clear\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intflag::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intflag::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intflag`]
module"] pub type INTFLAG = crate :: Reg < intflag :: INTFLAG_SPEC > ; # [doc = "MODE2 Interrupt Flag Status and Clear"] pub mod intflag ; # [doc = "STATUS (rw) register accessor: Status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`status::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`status::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status`]
module"] pub type STATUS = crate :: Reg < status :: STATUS_SPEC > ; # [doc = "Status"] pub mod status ; # [doc = "DBGCTRL (rw) register accessor: Debug Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dbgctrl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dbgctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dbgctrl`]
module"] pub type DBGCTRL = crate :: Reg < dbgctrl :: DBGCTRL_SPEC > ; # [doc = "Debug Control"] pub mod dbgctrl ; # [doc = "FREQCORR (rw) register accessor: Frequency Correction\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`freqcorr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`freqcorr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@freqcorr`]
module"] pub type FREQCORR = crate :: Reg < freqcorr :: FREQCORR_SPEC > ; # [doc = "Frequency Correction"] pub mod freqcorr ; # [doc = "CLOCK (rw) register accessor: MODE2 Clock Value\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`clock::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`clock::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clock`]
module"] pub type CLOCK = crate :: Reg < clock :: CLOCK_SPEC > ; # [doc = "MODE2 Clock Value"] pub mod clock ; # [doc = "ALARM (rw) register accessor: MODE2 Alarm n Value\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`alarm::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`alarm::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@alarm`]
module"] pub type ALARM = crate :: Reg < alarm :: ALARM_SPEC > ; # [doc = "MODE2 Alarm n Value"] pub mod alarm ; # [doc = "MASK (rw) register accessor: MODE2 Alarm n Mask\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`mask::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`mask::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@mask`]
module"] pub type MASK = crate :: Reg < mask :: MASK_SPEC > ; # [doc = "MODE2 Alarm n Mask"] pub mod mask ;