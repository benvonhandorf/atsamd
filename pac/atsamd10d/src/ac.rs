# [doc = r"Register block"] # [repr (C)] pub struct RegisterBlock { ctrla : CTRLA , ctrlb : CTRLB , evctrl : EVCTRL , intenclr : INTENCLR , intenset : INTENSET , intflag : INTFLAG , _reserved6 : [u8 ; 0x01] , statusa : STATUSA , statusb : STATUSB , statusc : STATUSC , _reserved9 : [u8 ; 0x01] , winctrl : WINCTRL , _reserved10 : [u8 ; 0x03] , compctrl : [COMPCTRL ; 2] , _reserved11 : [u8 ; 0x08] , scaler : [SCALER ; 2] , } impl RegisterBlock { # [doc = "0x00 - Control A"] # [inline (always)] pub const fn ctrla (& self) -> & CTRLA { & self . ctrla } # [doc = "0x01 - Control B"] # [inline (always)] pub const fn ctrlb (& self) -> & CTRLB { & self . ctrlb } # [doc = "0x02 - Event Control"] # [inline (always)] pub const fn evctrl (& self) -> & EVCTRL { & self . evctrl } # [doc = "0x04 - Interrupt Enable Clear"] # [inline (always)] pub const fn intenclr (& self) -> & INTENCLR { & self . intenclr } # [doc = "0x05 - Interrupt Enable Set"] # [inline (always)] pub const fn intenset (& self) -> & INTENSET { & self . intenset } # [doc = "0x06 - Interrupt Flag Status and Clear"] # [inline (always)] pub const fn intflag (& self) -> & INTFLAG { & self . intflag } # [doc = "0x08 - Status A"] # [inline (always)] pub const fn statusa (& self) -> & STATUSA { & self . statusa } # [doc = "0x09 - Status B"] # [inline (always)] pub const fn statusb (& self) -> & STATUSB { & self . statusb } # [doc = "0x0a - Status C"] # [inline (always)] pub const fn statusc (& self) -> & STATUSC { & self . statusc } # [doc = "0x0c - Window Control"] # [inline (always)] pub const fn winctrl (& self) -> & WINCTRL { & self . winctrl } # [doc = "0x10..0x18 - Comparator Control n"] # [inline (always)] pub const fn compctrl (& self , n : usize) -> & COMPCTRL { & self . compctrl [n] } # [doc = "Iterator for array of:"] # [doc = "0x10..0x18 - Comparator Control n"] # [inline (always)] pub fn compctrl_iter (& self) -> impl Iterator < Item = & COMPCTRL > { self . compctrl . iter () } # [doc = "0x20 - Scaler n"] # [inline (always)] pub const fn scaler (& self , n : usize) -> & SCALER { & self . scaler [n] } # [doc = "Iterator for array of:"] # [doc = "0x20 - Scaler n"] # [inline (always)] pub fn scaler_iter (& self) -> impl Iterator < Item = & SCALER > { self . scaler . iter () } } # [doc = "CTRLA (rw) register accessor: Control A\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrla::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrla::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrla`]
module"] pub type CTRLA = crate :: Reg < ctrla :: CTRLA_SPEC > ; # [doc = "Control A"] pub mod ctrla ; # [doc = "CTRLB (w) register accessor: Control B\n\nYou can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrlb::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrlb`]
module"] pub type CTRLB = crate :: Reg < ctrlb :: CTRLB_SPEC > ; # [doc = "Control B"] pub mod ctrlb ; # [doc = "EVCTRL (rw) register accessor: Event Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`evctrl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`evctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@evctrl`]
module"] pub type EVCTRL = crate :: Reg < evctrl :: EVCTRL_SPEC > ; # [doc = "Event Control"] pub mod evctrl ; # [doc = "INTENCLR (rw) register accessor: Interrupt Enable Clear\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intenclr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intenclr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intenclr`]
module"] pub type INTENCLR = crate :: Reg < intenclr :: INTENCLR_SPEC > ; # [doc = "Interrupt Enable Clear"] pub mod intenclr ; # [doc = "INTENSET (rw) register accessor: Interrupt Enable Set\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intenset::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intenset::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intenset`]
module"] pub type INTENSET = crate :: Reg < intenset :: INTENSET_SPEC > ; # [doc = "Interrupt Enable Set"] pub mod intenset ; # [doc = "INTFLAG (rw) register accessor: Interrupt Flag Status and Clear\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intflag::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intflag::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intflag`]
module"] pub type INTFLAG = crate :: Reg < intflag :: INTFLAG_SPEC > ; # [doc = "Interrupt Flag Status and Clear"] pub mod intflag ; # [doc = "STATUSA (r) register accessor: Status A\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`statusa::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@statusa`]
module"] pub type STATUSA = crate :: Reg < statusa :: STATUSA_SPEC > ; # [doc = "Status A"] pub mod statusa ; # [doc = "STATUSB (r) register accessor: Status B\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`statusb::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@statusb`]
module"] pub type STATUSB = crate :: Reg < statusb :: STATUSB_SPEC > ; # [doc = "Status B"] pub mod statusb ; # [doc = "STATUSC (r) register accessor: Status C\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`statusc::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@statusc`]
module"] pub type STATUSC = crate :: Reg < statusc :: STATUSC_SPEC > ; # [doc = "Status C"] pub mod statusc ; # [doc = "WINCTRL (rw) register accessor: Window Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`winctrl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`winctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@winctrl`]
module"] pub type WINCTRL = crate :: Reg < winctrl :: WINCTRL_SPEC > ; # [doc = "Window Control"] pub mod winctrl ; # [doc = "COMPCTRL (rw) register accessor: Comparator Control n\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`compctrl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`compctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@compctrl`]
module"] pub type COMPCTRL = crate :: Reg < compctrl :: COMPCTRL_SPEC > ; # [doc = "Comparator Control n"] pub mod compctrl ; # [doc = "SCALER (rw) register accessor: Scaler n\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`scaler::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`scaler::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@scaler`]
module"] pub type SCALER = crate :: Reg < scaler :: SCALER_SPEC > ; # [doc = "Scaler n"] pub mod scaler ;