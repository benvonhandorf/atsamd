# [doc = r"Register block"] # [repr (C)] pub struct I2CM { ctrla : CTRLA , ctrlb : CTRLB , _reserved2 : [u8 ; 0x04] , baud : BAUD , _reserved3 : [u8 ; 0x04] , intenclr : INTENCLR , _reserved4 : [u8 ; 0x01] , intenset : INTENSET , _reserved5 : [u8 ; 0x01] , intflag : INTFLAG , _reserved6 : [u8 ; 0x01] , status : STATUS , syncbusy : SYNCBUSY , _reserved8 : [u8 ; 0x04] , addr : ADDR , data : DATA , _reserved10 : [u8 ; 0x07] , dbgctrl : DBGCTRL , } impl I2CM { # [doc = "0x00 - I2CM Control A"] # [inline (always)] pub const fn ctrla (& self) -> & CTRLA { & self . ctrla } # [doc = "0x04 - I2CM Control B"] # [inline (always)] pub const fn ctrlb (& self) -> & CTRLB { & self . ctrlb } # [doc = "0x0c - I2CM Baud Rate"] # [inline (always)] pub const fn baud (& self) -> & BAUD { & self . baud } # [doc = "0x14 - I2CM Interrupt Enable Clear"] # [inline (always)] pub const fn intenclr (& self) -> & INTENCLR { & self . intenclr } # [doc = "0x16 - I2CM Interrupt Enable Set"] # [inline (always)] pub const fn intenset (& self) -> & INTENSET { & self . intenset } # [doc = "0x18 - I2CM Interrupt Flag Status and Clear"] # [inline (always)] pub const fn intflag (& self) -> & INTFLAG { & self . intflag } # [doc = "0x1a - I2CM Status"] # [inline (always)] pub const fn status (& self) -> & STATUS { & self . status } # [doc = "0x1c - I2CM Syncbusy"] # [inline (always)] pub const fn syncbusy (& self) -> & SYNCBUSY { & self . syncbusy } # [doc = "0x24 - I2CM Address"] # [inline (always)] pub const fn addr (& self) -> & ADDR { & self . addr } # [doc = "0x28 - I2CM Data"] # [inline (always)] pub const fn data (& self) -> & DATA { & self . data } # [doc = "0x30 - I2CM Debug Control"] # [inline (always)] pub const fn dbgctrl (& self) -> & DBGCTRL { & self . dbgctrl } } # [doc = "CTRLA (rw) register accessor: I2CM Control A\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrla::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrla::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrla`]
module"] pub type CTRLA = crate :: Reg < ctrla :: CTRLA_SPEC > ; # [doc = "I2CM Control A"] pub mod ctrla ; # [doc = "CTRLB (rw) register accessor: I2CM Control B\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrlb::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrlb::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrlb`]
module"] pub type CTRLB = crate :: Reg < ctrlb :: CTRLB_SPEC > ; # [doc = "I2CM Control B"] pub mod ctrlb ; # [doc = "BAUD (rw) register accessor: I2CM Baud Rate\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`baud::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`baud::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@baud`]
module"] pub type BAUD = crate :: Reg < baud :: BAUD_SPEC > ; # [doc = "I2CM Baud Rate"] pub mod baud ; # [doc = "INTENCLR (rw) register accessor: I2CM Interrupt Enable Clear\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intenclr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intenclr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intenclr`]
module"] pub type INTENCLR = crate :: Reg < intenclr :: INTENCLR_SPEC > ; # [doc = "I2CM Interrupt Enable Clear"] pub mod intenclr ; # [doc = "INTENSET (rw) register accessor: I2CM Interrupt Enable Set\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intenset::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intenset::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intenset`]
module"] pub type INTENSET = crate :: Reg < intenset :: INTENSET_SPEC > ; # [doc = "I2CM Interrupt Enable Set"] pub mod intenset ; # [doc = "INTFLAG (rw) register accessor: I2CM Interrupt Flag Status and Clear\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intflag::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intflag::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intflag`]
module"] pub type INTFLAG = crate :: Reg < intflag :: INTFLAG_SPEC > ; # [doc = "I2CM Interrupt Flag Status and Clear"] pub mod intflag ; # [doc = "STATUS (rw) register accessor: I2CM Status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`status::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`status::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status`]
module"] pub type STATUS = crate :: Reg < status :: STATUS_SPEC > ; # [doc = "I2CM Status"] pub mod status ; # [doc = "SYNCBUSY (r) register accessor: I2CM Syncbusy\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`syncbusy::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@syncbusy`]
module"] pub type SYNCBUSY = crate :: Reg < syncbusy :: SYNCBUSY_SPEC > ; # [doc = "I2CM Syncbusy"] pub mod syncbusy ; # [doc = "ADDR (rw) register accessor: I2CM Address\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`addr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`addr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@addr`]
module"] pub type ADDR = crate :: Reg < addr :: ADDR_SPEC > ; # [doc = "I2CM Address"] pub mod addr ; # [doc = "DATA (rw) register accessor: I2CM Data\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`data::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`data::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data`]
module"] pub type DATA = crate :: Reg < data :: DATA_SPEC > ; # [doc = "I2CM Data"] pub mod data ; # [doc = "DBGCTRL (rw) register accessor: I2CM Debug Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dbgctrl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dbgctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dbgctrl`]
module"] pub type DBGCTRL = crate :: Reg < dbgctrl :: DBGCTRL_SPEC > ; # [doc = "I2CM Debug Control"] pub mod dbgctrl ;