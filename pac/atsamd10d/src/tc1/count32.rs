# [doc = r"Register block"] # [repr (C)] pub struct COUNT32 { ctrla : CTRLA , readreq : READREQ , ctrlbclr : CTRLBCLR , ctrlbset : CTRLBSET , ctrlc : CTRLC , _reserved5 : [u8 ; 0x01] , dbgctrl : DBGCTRL , _reserved6 : [u8 ; 0x01] , evctrl : EVCTRL , intenclr : INTENCLR , intenset : INTENSET , intflag : INTFLAG , status : STATUS , count : COUNT , _reserved12 : [u8 ; 0x04] , cc : [CC ; 2] , } impl COUNT32 { # [doc = "0x00 - Control A"] # [inline (always)] pub const fn ctrla (& self) -> & CTRLA { & self . ctrla } # [doc = "0x02 - Read Request"] # [inline (always)] pub const fn readreq (& self) -> & READREQ { & self . readreq } # [doc = "0x04 - Control B Clear"] # [inline (always)] pub const fn ctrlbclr (& self) -> & CTRLBCLR { & self . ctrlbclr } # [doc = "0x05 - Control B Set"] # [inline (always)] pub const fn ctrlbset (& self) -> & CTRLBSET { & self . ctrlbset } # [doc = "0x06 - Control C"] # [inline (always)] pub const fn ctrlc (& self) -> & CTRLC { & self . ctrlc } # [doc = "0x08 - Debug Control"] # [inline (always)] pub const fn dbgctrl (& self) -> & DBGCTRL { & self . dbgctrl } # [doc = "0x0a - Event Control"] # [inline (always)] pub const fn evctrl (& self) -> & EVCTRL { & self . evctrl } # [doc = "0x0c - Interrupt Enable Clear"] # [inline (always)] pub const fn intenclr (& self) -> & INTENCLR { & self . intenclr } # [doc = "0x0d - Interrupt Enable Set"] # [inline (always)] pub const fn intenset (& self) -> & INTENSET { & self . intenset } # [doc = "0x0e - Interrupt Flag Status and Clear"] # [inline (always)] pub const fn intflag (& self) -> & INTFLAG { & self . intflag } # [doc = "0x0f - Status"] # [inline (always)] pub const fn status (& self) -> & STATUS { & self . status } # [doc = "0x10 - COUNT32 Counter Value"] # [inline (always)] pub const fn count (& self) -> & COUNT { & self . count } # [doc = "0x18..0x20 - COUNT32 Compare/Capture"] # [inline (always)] pub const fn cc (& self , n : usize) -> & CC { & self . cc [n] } # [doc = "Iterator for array of:"] # [doc = "0x18..0x20 - COUNT32 Compare/Capture"] # [inline (always)] pub fn cc_iter (& self) -> impl Iterator < Item = & CC > { self . cc . iter () } } # [doc = "CTRLA (rw) register accessor: Control A\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrla::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrla::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrla`]
module"] pub type CTRLA = crate :: Reg < ctrla :: CTRLA_SPEC > ; # [doc = "Control A"] pub mod ctrla ; # [doc = "READREQ (rw) register accessor: Read Request\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`readreq::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`readreq::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@readreq`]
module"] pub type READREQ = crate :: Reg < readreq :: READREQ_SPEC > ; # [doc = "Read Request"] pub mod readreq ; # [doc = "CTRLBCLR (rw) register accessor: Control B Clear\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrlbclr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrlbclr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrlbclr`]
module"] pub type CTRLBCLR = crate :: Reg < ctrlbclr :: CTRLBCLR_SPEC > ; # [doc = "Control B Clear"] pub mod ctrlbclr ; # [doc = "CTRLBSET (rw) register accessor: Control B Set\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrlbset::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrlbset::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrlbset`]
module"] pub type CTRLBSET = crate :: Reg < ctrlbset :: CTRLBSET_SPEC > ; # [doc = "Control B Set"] pub mod ctrlbset ; # [doc = "CTRLC (rw) register accessor: Control C\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`ctrlc::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`ctrlc::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctrlc`]
module"] pub type CTRLC = crate :: Reg < ctrlc :: CTRLC_SPEC > ; # [doc = "Control C"] pub mod ctrlc ; # [doc = "DBGCTRL (rw) register accessor: Debug Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`dbgctrl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`dbgctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dbgctrl`]
module"] pub type DBGCTRL = crate :: Reg < dbgctrl :: DBGCTRL_SPEC > ; # [doc = "Debug Control"] pub mod dbgctrl ; # [doc = "EVCTRL (rw) register accessor: Event Control\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`evctrl::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`evctrl::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@evctrl`]
module"] pub type EVCTRL = crate :: Reg < evctrl :: EVCTRL_SPEC > ; # [doc = "Event Control"] pub mod evctrl ; # [doc = "INTENCLR (rw) register accessor: Interrupt Enable Clear\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intenclr::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intenclr::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intenclr`]
module"] pub type INTENCLR = crate :: Reg < intenclr :: INTENCLR_SPEC > ; # [doc = "Interrupt Enable Clear"] pub mod intenclr ; # [doc = "INTENSET (rw) register accessor: Interrupt Enable Set\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intenset::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intenset::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intenset`]
module"] pub type INTENSET = crate :: Reg < intenset :: INTENSET_SPEC > ; # [doc = "Interrupt Enable Set"] pub mod intenset ; # [doc = "INTFLAG (rw) register accessor: Interrupt Flag Status and Clear\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`intflag::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`intflag::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intflag`]
module"] pub type INTFLAG = crate :: Reg < intflag :: INTFLAG_SPEC > ; # [doc = "Interrupt Flag Status and Clear"] pub mod intflag ; # [doc = "STATUS (r) register accessor: Status\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`status::R`].  See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@status`]
module"] pub type STATUS = crate :: Reg < status :: STATUS_SPEC > ; # [doc = "Status"] pub mod status ; # [doc = "COUNT (rw) register accessor: COUNT32 Counter Value\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`count::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`count::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@count`]
module"] pub type COUNT = crate :: Reg < count :: COUNT_SPEC > ; # [doc = "COUNT32 Counter Value"] pub mod count ; # [doc = "CC (rw) register accessor: COUNT32 Compare/Capture\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cc::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cc::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cc`]
module"] pub type CC = crate :: Reg < cc :: CC_SPEC > ; # [doc = "COUNT32 Compare/Capture"] pub mod cc ;